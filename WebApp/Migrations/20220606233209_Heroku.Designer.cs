// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220606233209_Heroku")]
    partial class Heroku
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApp.Model.Addition", b =>
                {
                    b.Property<long>("AdditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AdditionId"));

                    b.Property<string>("AdditionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionVisual")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AdditionId");

                    b.ToTable("Additions");

                    b.HasData(
                        new
                        {
                            AdditionId = 1L,
                            AdditionName = "Owoce",
                            AdditionVisual = ""
                        });
                });

            modelBuilder.Entity("WebApp.Model.Cake", b =>
                {
                    b.Property<long>("CakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CakeId"));

                    b.Property<string>("CakeColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CakeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CakeId");

                    b.ToTable("Cakes");

                    b.HasData(
                        new
                        {
                            CakeId = 1L,
                            CakeColor = "#FFFF99",
                            CakeName = "Śmietankowe"
                        },
                        new
                        {
                            CakeId = 2L,
                            CakeColor = "#FDE456",
                            CakeName = "Waniliowe"
                        },
                        new
                        {
                            CakeId = 3L,
                            CakeColor = "#AC7A33",
                            CakeName = "Czekoladowe"
                        });
                });

            modelBuilder.Entity("WebApp.Model.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            CategoryName = "Torty"
                        },
                        new
                        {
                            CategoryId = 2L,
                            CategoryName = "Ciasta"
                        },
                        new
                        {
                            CategoryId = 3L,
                            CategoryName = "Ciastka"
                        },
                        new
                        {
                            CategoryId = 4L,
                            CategoryName = "Cukierki"
                        },
                        new
                        {
                            CategoryId = 5L,
                            CategoryName = "Lody"
                        });
                });

            modelBuilder.Entity("WebApp.Model.Customization", b =>
                {
                    b.Property<long>("CustomizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CustomizationId"));

                    b.Property<long>("AdditionId")
                        .HasColumnType("bigint");

                    b.Property<long>("CakeId")
                        .HasColumnType("bigint");

                    b.Property<long>("FillingId")
                        .HasColumnType("bigint");

                    b.Property<long>("GlazeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SizeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("CustomizationId");

                    b.HasIndex("AdditionId");

                    b.HasIndex("CakeId");

                    b.HasIndex("FillingId");

                    b.HasIndex("GlazeId");

                    b.HasIndex("SizeId");

                    b.ToTable("Customizations");

                    b.HasData(
                        new
                        {
                            CustomizationId = 1L,
                            AdditionId = 1L,
                            CakeId = 1L,
                            FillingId = 2L,
                            GlazeId = 1L,
                            SizeId = 3L,
                            Text = "100 lat!"
                        });
                });

            modelBuilder.Entity("WebApp.Model.Filling", b =>
                {
                    b.Property<long>("FillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FillingId"));

                    b.Property<string>("FillingColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FillingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FillingId");

                    b.ToTable("Fillings");

                    b.HasData(
                        new
                        {
                            FillingId = 1L,
                            FillingColor = "#FFFDD0",
                            FillingName = "Kremowe"
                        },
                        new
                        {
                            FillingId = 2L,
                            FillingColor = "#7B3F00",
                            FillingName = "Czekoladowe"
                        },
                        new
                        {
                            FillingId = 3L,
                            FillingColor = "#CF2942",
                            FillingName = "Truskawkowe"
                        },
                        new
                        {
                            FillingId = 4L,
                            FillingColor = "#DC143C",
                            FillingName = "Malinowe"
                        });
                });

            modelBuilder.Entity("WebApp.Model.Glaze", b =>
                {
                    b.Property<long>("GlazeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GlazeId"));

                    b.Property<string>("GlazeColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GlazeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GlazeId");

                    b.ToTable("Glazes");

                    b.HasData(
                        new
                        {
                            GlazeId = 1L,
                            GlazeColor = "#FFFFF0",
                            GlazeName = "Śmietankowa"
                        },
                        new
                        {
                            GlazeId = 2L,
                            GlazeColor = "#7B3F00",
                            GlazeName = "Czekoladowa"
                        },
                        new
                        {
                            GlazeId = 3L,
                            GlazeColor = "#F5ACCB",
                            GlazeName = "Truskawkowa"
                        });
                });

            modelBuilder.Entity("WebApp.Model.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderId"));

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("CustomerPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<decimal>("OrderValue")
                        .HasColumnType("numeric");

                    b.Property<bool>("SelfPickUp")
                        .HasColumnType("boolean");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1L,
                            CustomerAddress = "Aleja Jana Pawła II 21/37",
                            CustomerCity = "",
                            CustomerEmail = "piotrek3201@onet.pl",
                            CustomerName = "Piotr Kałuziński",
                            CustomerPhone = "+48501171851",
                            CustomerPostalCode = "00-213",
                            Date = new DateTime(2022, 6, 7, 1, 32, 8, 990, DateTimeKind.Local).AddTicks(2744),
                            DeliveryDate = new DateTime(2022, 6, 9, 1, 32, 8, 990, DateTimeKind.Local).AddTicks(2745),
                            IsFinished = false,
                            OrderValue = 50m,
                            SelfPickUp = false
                        },
                        new
                        {
                            OrderId = 2L,
                            CustomerAddress = "Długa 10",
                            CustomerCity = "",
                            CustomerEmail = "jan.kowalski@gmail.com",
                            CustomerName = "Jan Kowalski",
                            CustomerPhone = "+48501355704",
                            CustomerPostalCode = "02-137",
                            Date = new DateTime(2022, 6, 7, 1, 32, 8, 990, DateTimeKind.Local).AddTicks(2750),
                            DeliveryDate = new DateTime(2022, 6, 11, 1, 32, 8, 990, DateTimeKind.Local).AddTicks(2752),
                            IsFinished = false,
                            OrderValue = 20m,
                            SelfPickUp = false
                        });
                });

            modelBuilder.Entity("WebApp.Model.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderDetailId"));

                    b.Property<long?>("CustomizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("CustomizationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1L,
                            CustomizationId = 1L,
                            OrderId = 1L,
                            Price = 8.5m,
                            ProductId = 1L,
                            Quantity = 0.5
                        },
                        new
                        {
                            OrderDetailId = 2L,
                            OrderId = 1L,
                            Price = 40m,
                            ProductId = 3L,
                            Quantity = 2.0
                        },
                        new
                        {
                            OrderDetailId = 3L,
                            OrderId = 2L,
                            Price = 15m,
                            ProductId = 4L,
                            Quantity = 1.0
                        },
                        new
                        {
                            OrderDetailId = 4L,
                            OrderId = 2L,
                            Price = 4.75m,
                            ProductId = 2L,
                            Quantity = 0.25
                        });
                });

            modelBuilder.Entity("WebApp.Model.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProductId"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsByWeight")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustomizable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            CategoryId = 1L,
                            Description = "Sam skomponuj swój wymarzony tort!",
                            ImageUrl = "",
                            IsByWeight = false,
                            IsCustomizable = true,
                            Name = "Tort własny",
                            Price = 50m
                        },
                        new
                        {
                            ProductId = 2L,
                            CategoryId = 2L,
                            Description = "Pyszne czekoladowe ciasto, lepsze niż we Władysławowie!",
                            ImageUrl = "",
                            IsByWeight = false,
                            IsCustomizable = false,
                            Name = "Brownie",
                            Price = 20m
                        },
                        new
                        {
                            ProductId = 3L,
                            CategoryId = 4L,
                            Description = "Klasyczne ciasto ze świeżymi jabłkami",
                            ImageUrl = "",
                            IsByWeight = false,
                            IsCustomizable = false,
                            Name = "Szarlotka",
                            Price = 15m
                        },
                        new
                        {
                            ProductId = 4L,
                            CategoryId = 4L,
                            Description = "Kultowe karmelki",
                            ImageUrl = "",
                            IsByWeight = true,
                            IsCustomizable = false,
                            Name = "Kukułki",
                            Price = 17m
                        });
                });

            modelBuilder.Entity("WebApp.Model.Size", b =>
                {
                    b.Property<long>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SizeId"));

                    b.Property<int>("Diameter")
                        .HasColumnType("integer");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1L,
                            Diameter = 20
                        },
                        new
                        {
                            SizeId = 2L,
                            Diameter = 30
                        },
                        new
                        {
                            SizeId = 3L,
                            Diameter = 45
                        });
                });

            modelBuilder.Entity("WebApp.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApp.Model.Customization", b =>
                {
                    b.HasOne("WebApp.Model.Addition", "Addition")
                        .WithMany("Customizations")
                        .HasForeignKey("AdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Model.Cake", "Cake")
                        .WithMany("Customizations")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Model.Filling", "Filling")
                        .WithMany("Customizations")
                        .HasForeignKey("FillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Model.Glaze", "Glaze")
                        .WithMany("Customizations")
                        .HasForeignKey("GlazeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Model.Size", "Size")
                        .WithMany("Customizations")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addition");

                    b.Navigation("Cake");

                    b.Navigation("Filling");

                    b.Navigation("Glaze");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("WebApp.Model.OrderDetail", b =>
                {
                    b.HasOne("WebApp.Model.Customization", "Customization")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomizationId");

                    b.HasOne("WebApp.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customization");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApp.Model.Product", b =>
                {
                    b.HasOne("WebApp.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApp.Model.Addition", b =>
                {
                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("WebApp.Model.Cake", b =>
                {
                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("WebApp.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApp.Model.Customization", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WebApp.Model.Filling", b =>
                {
                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("WebApp.Model.Glaze", b =>
                {
                    b.Navigation("Customizations");
                });

            modelBuilder.Entity("WebApp.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WebApp.Model.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WebApp.Model.Size", b =>
                {
                    b.Navigation("Customizations");
                });
#pragma warning restore 612, 618
        }
    }
}
